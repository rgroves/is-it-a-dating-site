---
import { getCollection } from "astro:content";
import AppCard from "./AppCard.astro";

const allAppInfo = await getCollection("AppInfo");
const sortedApps = allAppInfo.sort((a, b) => {
  return a.data.appName.localeCompare(b.data.appName);
});
---

<div class="app-cards">
  {
    sortedApps.map((appInfo) => {
      const data = appInfo.data;
      return (
        <AppCard
          appName={data.appName}
          altText=""
          appLogoPath={data.appLogoPath}
          appLogoOrientation={data.appLogoOrientation}
          appAnswer={data.appAnswer}
        />
      );
    })
  }
</div>
<!-- This is the instruction to let SR users know about flip cards. -->
<span class="sr-only" id="app-card-desc"
  >This is a flip card. Activated by pressing enter or spacebar, or alt + enter/
  alt + space bar.</span
>

<div id="no-sounds">
  <audio id="sid-1" src="/audio/aint-got-time.mp3"></audio>
  <audio id="sid-2" src="/audio/how-about-no.mp3"></audio>
  <audio id="sid-3" src="/audio/oh-hell-nah-sung.mp3"></audio>
  <audio id="sid-4" src="/audio/no-way-man.mp3"></audio>
  <audio id="sid-5" src="/audio/oh-hell-no.mp3"></audio>
</div>

<script>
  let prevSoundIdx: number = -1;
  const flipEvent = new CustomEvent("cardflipped", { bubbles: true });
  const unflipEvent = new CustomEvent("cardunflipped", { bubbles: true });

  const noSounds: NodeListOf<HTMLMediaElement> =
    document.querySelectorAll("#no-sounds > audio");

  const getNonRepeatingSoundIdx = (prevSoundIdx: number) => {
    let idx = Math.floor(Math.random() * noSounds.length);
    return idx === prevSoundIdx
      ? (idx = (prevSoundIdx + 1) % noSounds.length)
      : idx;
  };

  const fadeOut = (sound: HTMLMediaElement) => {
    const newVolume = sound.volume - 0.1;
    if (newVolume <= 0) {
      sound.pause();
      sound.currentTime = 0;
      sound.volume = 1;
    } else {
      sound.volume = newVolume;
      setTimeout(() => fadeOut(sound), 100);
    }
  };

  const toggleFlip = (card: HTMLElement) => {
    const isPressed = card.getAttribute("aria-pressed") === "true";
    card.setAttribute("aria-pressed", String(!isPressed));

    if (!isPressed) {
      card.dispatchEvent(flipEvent);
    } else {
      card.dispatchEvent(unflipEvent);
    }
  };

  const toggleSrHidden = (card: HTMLElement) => {
    const isSRHidden = card.getAttribute("aria-pressed") === "true";
    const front = card.querySelector(".app-card-front");
    const back = card.querySelector(".app-card-back");

    if (!front || !back) {
      throw new Error("AppCard: Front or back element not found in the card.");
    }

    front.setAttribute("aria-hidden", String(isSRHidden));
    back.setAttribute("aria-hidden", String(!isSRHidden));
  };

  const grid = document.querySelector(".app-cards");

  if (!grid) {
    throw new Error("AppCardGrid: No grid found in the document.");
  }

  grid.addEventListener(flipEvent.type, (event) => {
    const card = event.target as HTMLElement;

    if (card.dataset.answer === "No") {
      const soundIdx = getNonRepeatingSoundIdx(prevSoundIdx);
      const sound = noSounds[soundIdx];
      prevSoundIdx = soundIdx;

      if (sound) {
        const id = sound.attributes.getNamedItem("id")?.value || "";
        card.dataset.sid = id;
        sound.muted = false;
        sound.play();
      }
    }
  });

  grid.addEventListener(unflipEvent.type, (event) => {
    const card = event.target as HTMLElement;
    const soundId = card.dataset.sid;
    if (soundId) {
      card.dataset.sid = "";
      const sound: HTMLMediaElement | null = document.getElementById(
        soundId
      ) as HTMLMediaElement;
      if (sound) {
        fadeOut(sound);
      }
    }
  });

  const appCards: Array<HTMLElement> = Array.from(
    grid.querySelectorAll(".app-card")
  );

  appCards.forEach((card) => {
    card.addEventListener("click", (e) => {
      e.stopPropagation();
      toggleFlip(card);
      toggleSrHidden(card);
    });
    card.addEventListener("keydown", (e) => {
      e.stopPropagation();
      if ((e.code === "Enter" || e.code === "Space") && !e.repeat) {
        e.preventDefault();
        toggleFlip(card);
        toggleSrHidden(card);
      }
    });
  });
</script>

<style>
  /** Flip Card implementation inpired by:
        https://www.smashingmagazine.com/2020/02/magic-flip-cards-common-sizing-problem/
        https://codeaccessible.com/codepatterns/flip-cards/
  */
  .app-cards {
    --flip-time: 0.75s;
    display: grid;
    grid-gap: var(--space-m);
    grid-auto-rows: auto;
    grid-template-columns: repeat(auto-fit, minmax(15rem, 15rem));
    justify-content: center;
  }
</style>
