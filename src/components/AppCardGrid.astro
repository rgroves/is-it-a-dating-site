---
import { getCollection } from "astro:content";
import AppCard from "./AppCard.astro";

const allAppInfo = await getCollection("AppInfo");
const sortedApps = allAppInfo.sort((a, b) => {
  return a.data.appName.localeCompare(b.data.appName);
});
---

<div class="app-cards">
  {
    sortedApps.map((appInfo) => {
      const data = appInfo.data;
      return (
        <AppCard
          appName={data.appName}
          altText=""
          appLogoPath={data.appLogoPath}
          appLogoOrientation={data.appLogoOrientation}
          appAnswer={data.appAnswer}
        />
      );
    })
  }
</div>
<!-- This is the instruction to let SR users know about flip cards. -->
<span class="sr-only" id="app-card-desc"
  >This is a flip card. Activated by pressing enter or spacebar, or alt + enter/
  alt + space bar.</span
>

<script>
  const playSoundEvent = new CustomEvent("iiada-play-sound", {
    bubbles: true,
  });
  const fadeSoundEvent = new CustomEvent("iiada-fade-sound", {
    bubbles: true,
  });

  const toggleFlip = (card: HTMLElement) => {
    const isPressed = card.getAttribute("aria-pressed") === "true";
    card.setAttribute("aria-pressed", String(!isPressed));

    if (!isPressed) {
      card.dispatchEvent(playSoundEvent);
    } else {
      card.dispatchEvent(fadeSoundEvent);
    }
  };

  const toggleSrHidden = (card: HTMLElement) => {
    const isSRHidden = card.getAttribute("aria-pressed") === "true";
    const front = card.querySelector(".app-card-front");
    const back = card.querySelector(".app-card-back");

    if (!front || !back) {
      throw new Error("AppCard: Front or back element not found in the card.");
    }

    front.setAttribute("aria-hidden", String(isSRHidden));
    back.setAttribute("aria-hidden", String(!isSRHidden));
  };

  const grid = document.querySelector(".app-cards");

  if (!grid) {
    throw new Error("AppCardGrid: No grid found in the document.");
  }

  const appCards: Array<HTMLElement> = Array.from(
    grid.querySelectorAll(".app-card")
  );

  appCards.forEach((card) => {
    card.addEventListener("click", (e) => {
      e.stopPropagation();
      toggleFlip(card);
      toggleSrHidden(card);
    });
    card.addEventListener("keydown", (e) => {
      e.stopPropagation();
      if ((e.code === "Enter" || e.code === "Space") && !e.repeat) {
        e.preventDefault();
        toggleFlip(card);
        toggleSrHidden(card);
      }
    });
  });
</script>

<style>
  /** Flip Card implementation inpired by:
        https://www.smashingmagazine.com/2020/02/magic-flip-cards-common-sizing-problem/
        https://codeaccessible.com/codepatterns/flip-cards/
  */
  .app-cards {
    --flip-time: 0.75s;
    display: grid;
    grid-gap: var(--space-m);
    grid-auto-rows: auto;
    grid-template-columns: repeat(auto-fit, minmax(15rem, 15rem));
    justify-content: center;
  }
</style>
