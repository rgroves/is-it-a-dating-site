---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

type AppInfo = {
  appName: string;
};

const allAppInfo: [CollectionEntry<AppInfo>] = await getCollection("app-info");
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Is It A Dating App?</title>
  </head>
  <body>
    <h1>Is It A Dating App?</h1>
    <div class="app-cards">
      {
        allAppInfo.map((appInfo) => (
          <a class="app-card" href="#">
            <div class="app-card-body">
              <div class="app-card-front">
                {appInfo.data.appLogoUrl ? (
                  <div class="app-logo">
                    <img src={appInfo.data.appLogoUrl} width="100%" alt="" />
                  </div>
                ) : (
                  ""
                )}
                <div class="app-name">{appInfo.data.appName}</div>
                <div class="app-question">?</div>
              </div>
              <div class="app-card-back">
                <div class="app-answer">{appInfo.data.answer}</div>
              </div>
            </div>
          </a>
        ))
      }
    </div>
  </body>
</html>

<style>
  /*
	Inspired by Josh's Custom CSS Reset
	https://www.joshwcomeau.com/css/custom-css-reset/
	*/
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  * {
    margin: 0;
  }

  body {
    line-height: 1.5;
    -webkit-font-smoothing: antialiased;
  }

  img,
  picture,
  video,
  canvas,
  svg {
    display: block;
    max-width: 100%;
  }

  input,
  button,
  textarea,
  select {
    font: inherit;
  }

  p,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    overflow-wrap: break-word;
  }

  /** Flip Card implementation originally taken from: 
      https://www.smashingmagazine.com/2020/02/magic-flip-cards-common-sizing-problem/
  */

  .app-cards {
    display: grid;
    --flip-time: 0.75s;

    grid-gap: 1.5rem;
    grid-auto-rows: 1fr;
    padding: 3rem;
    grid-template-columns: repeat(auto-fit, minmax(10rem, 1fr));
  }

  a.app-card {
    text-decoration: none;
    cursor: default;
  }

  a.app-card:link,
  a.app-card:visited,
  a.app-card:hover,
  a.app-card:active {
    color: black;
  }

  .app-card {
    perspective: 40rem;

    transition:
      z-index,
      transform calc(var(--flip-time) / 4);
    transition-delay: var(--flip-time), 0s;
    z-index: 0;
  }

  .app-card:hover {
    transition-delay: 0s;
    z-index: 1;
  }

  .app-card:active {
    transform: scale(0.75);
  }

  .app-card-body {
    display: flex;
    transform-style: preserve-3d;
    transition: var(--flip-time) transform;
  }

  .app-card:hover .app-card-body {
    transform: rotateX(-180deg);
  }
  .app-card:focus .app-card-body {
    transform: rotateX(-180deg);
  }

  .app-card-front,
  .app-card-back {
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
    min-width: 100%;

    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: white;
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.5);
    border-radius: 0.5rem;
    padding: 1.5rem;
  }

  .app-card-back {
    transform: rotateX(-180deg) translate(-100%, 0);
  }
</style>
